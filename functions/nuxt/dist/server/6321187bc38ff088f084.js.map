{"version":3,"file":"6321187bc38ff088f084.js","sources":["webpack:///./utils/authService.js"],"sourcesContent":["import auth0 from 'auth0-js';\r\nimport EventEmitter from 'eventemitter3';\r\n\r\nconst webAuth = new auth0.WebAuth({\r\n    domain: 'dev-18di56pe.auth0.com',\r\n    redirectUri: 'http://localhost:3000/callback',\r\n    clientID: 'Bzhlz3c6AvkNvQGZ2VKTyeGYSTNCzmyl',\r\n    responseType: 'token id_token',\r\n    scope: 'openid profile email'\r\n});\r\n\r\nconst localStorageKey = 'loggedIn';\r\nconst loginEvent = 'loginEvent';\r\n\r\nclass AuthService extends EventEmitter {\r\n  \r\n  idToken = null;\r\n  profile = null;\r\n  tokenExpiry = null;\r\n\r\n  // Starts the user login flow\r\n  login() {\r\n    webAuth.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((reject) => {\r\n      webAuth.parseHash((err, authResult) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          localStorage.setItem(localStorageKey, true)\r\n          // Set the time that the access token will expire at\r\n          let expiresAt = JSON.stringify(\r\n            authResult.expiresIn * 1000 + new Date().getTime()\r\n          )\r\n          localStorage.setItem('access_token', authResult.accessToken)\r\n          localStorage.setItem('id_token', authResult.idToken)\r\n          localStorage.setItem('expires_at', expiresAt)\r\n          return true\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n/*\r\n  localLogin(authResult) {\r\n    this.idToken = authResult.idToken;\r\n    this.profile = authResult.idTokenPayload;\r\n\r\n    // Convert the JWT expiry time from seconds to milliseconds\r\n    this.tokenExpiry = new Date(this.profile.exp * 1000);\r\n\r\n    localStorage.setItem(localStorageKey, 'true');\r\n\r\n    this.emit(loginEvent, {\r\n      loggedIn: true,\r\n      profile: authResult.idTokenPayload,\r\n      state: authResult.appState || {}\r\n    });\r\n  }\r\n*/\r\n\r\n  renewTokens() {\r\n    return new Promise((resolve, reject) => {\r\n      if (localStorage.getItem(localStorageKey) !== \"true\") {\r\n        return reject(\"Not logged in\");\r\n      }\r\n      \r\n      webAuth.checkSession({}, (err, authResult) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          this.localLogin(authResult);\r\n          resolve(authResult);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  logOut() {\r\n    localStorage.removeItem(localStorageKey);\r\n\r\n    this.idToken = null;\r\n    this.tokenExpiry = null;\r\n    this.profile = null;\r\n\r\n    webAuth.logout({\r\n      returnTo: window.location.origin\r\n    });\r\n\r\n    this.emit(loginEvent, { loggedIn: false });\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return (\r\n      Date.now() < this.tokenExpiry &&\r\n      localStorage.getItem(localStorageKey) === 'true'\r\n    );\r\n  }\r\n  \r\n}\r\nexport default new AuthService();"],"mappings":"AAGA","sourceRoot":""}